#引用模块
import pylab as pl  
import math

#作图模块
pl.figure(figsize=(10,10))
pl.title('title',size=14)
pl.xlabel('x axis',size=14)
pl.ylabel('y axis',size=14)
pl.xlim(-100,100)
pl.ylim(0,100)
#pl.plot(X,Y,color='g',linewidth=2,marker='o',ms=3,label='label')
pl.legend(loc='upper right')
pl.show()

#常数部分
kb=4*math.pi**2
deta=0.0001

me=6*10**24
mj=1.9*10**27
ms=2*10**30

#函数定义
def O(r_e,theta_e,ve_x,ve_y,r_j,theta_j,vj_x,vj_y)：

#初始参数角度，弧度转换
xe=r_e*(math.cos(theta_e))
ye=r_e*(math.sin(theta_e))

xj=r_j*(math.cos(theta_j))
yj=r_j*(math.sin(theta_j))

#太阳初始位置计算
xs=(me*xe+mj*xj)/ms
ys=(me*ye+mj*yj)/ms
vsx=(me*ve_x+mj*vj_x)/ms
vsy=(me*ve_y+mj*vj_y)/ms

#数组定义
XE=[xe]
YE=[ye]

XJ=[xj]
YJ=[yj]

XS=[xs]
YS=[ys]

VEX=[ve_x]
VEY=[ve_y]

VJX=[vj_x]
VJY=[vj_y]

VSX=[vsx]
VSY=[vsy]

vex=ve_x
vey=ve_y

vjx=vj_x
vjy=vj_y

t=0
T=[t]

#计算部分
rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
res=math.sqrt((xe-xs)**2+(ye-ys)**2)
rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
c1=xe+a1*deta
d1=ye+b1*deta

#对木星
a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
c2=xj+a2*deta
d2=yj+b2*deta

#对太阳
a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
c3=xs+a3*deta
d3=ys+b3*deta

#对整体
vex=a1
vey=b1
xe=c1
ye=d1

vjx=a2
vjy=b2
xj=c2
yj=d2

vsx=a3
vsy=b3
xs=c3
ys=d3



1.速度全定义程序：
import pylab as pl  
import math

#常数部分
pi=math.pi
k=4*math.pi**2
deta=0.0001
me=6*10**24
mj=1.9*10**27
ms=2*10**30

vestand=2*pi
vjstand=2.755359

#函数定义
def O(r_e,theta_e,ve_x,ve_y,r_j,theta_j,vj_x,vj_y,TS):    
#初始参数角度，弧度转换
     theta_e1=math.radians(theta_e)
     theta_j1=math.radians(theta_j)
     xe=r_e*(math.cos(theta_e1))
     ye=r_e*(math.sin(theta_e1))

     xj=r_j*(math.cos(theta_j1))
     yj=r_j*(math.sin(theta_j1))
#太阳初始位置计算
     xs=-(me*xe+mj*xj)/ms
     ys=-(me*ye+mj*yj)/ms
     vsx=-(me*ve_x+mj*vj_x)/ms
     vsy=-(me*ve_y+mj*vj_y)/ms
#数组定义
     XE=[xe]
     YE=[ye]
     XJ=[xj]
     YJ=[yj]
     XS=[xs]
     YS=[ys]

     VEX=[ve_x]
     VEY=[ve_y]
     VJX=[vj_x]
     VJY=[vj_y]

     VSX=[vsx]
     VSY=[vsy]
     vex=ve_x
     vey=ve_y

     vjx=vj_x
     vjy=vj_y

     t=0
    #T=[t]
     while t<TS:
#计算部分
       rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
       res=math.sqrt((xe-xs)**2+(ye-ys)**2)
       rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
       a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
       b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
       c1=xe+a1*deta
       d1=ye+b1*deta       
#对木星
       a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
       b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
       c2=xj+a2*deta
       d2=yj+b2*deta
#对太阳
       a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
       b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
       c3=xs+a3*deta
       d3=ys+b3*deta
#对整体
       vex=a1
       vey=b1
       xe=c1
       ye=d1

       vjx=a2
       vjy=b2
       xj=c2
       yj=d2

       vsx=a3
       vsy=b3
       xs=c3
       ys=d3
    
       XE.append(xe)
       YE.append(ye)
       XJ.append(xj)
       YJ.append(yj)
       XS.append(xs)
       YS.append(ys)
       
       VEX.append(ve_x)
       VEY.append(ve_y)
       VJX.append(vj_x)
       VJY.append(vj_y)
       VSX.append(vsx)  
       VSY.append(vsy)
       t=t+deta
     else:
       print('over')
       pl.figure(figsize=(10,10))
       pl.title('title',size=14)
       pl.xlabel('x(AU)',size=14)
       pl.ylabel('y(AU)',size=14)
       pl.xlim(-7,7)
       pl.ylim(-7,7)
       pl.plot(XE,YE,color='b',linewidth=1.5,label='Earth')
       pl.plot(XJ,YJ,color='g',linewidth=1.5,label='Jupiter')
       pl.plot(XS,YS,color='r',linewidth=1.5,label='Sun')
       pl.legend(loc='upper right')
       pl.show()





O(1,0, -0.9*(2*pi),1*(2*pi), 5.2,0,  0*2.755359,1*2.755359, 1.8*11.85782442)  
#O(r_e,theta_e,ve_x,ve_y,r_j,theta_j,vj_x,vj_y,TS):

2.速度标准比程序：
import pylab as pl  
import math

#常数部分
pi=math.pi
k=4*math.pi**2
deta=0.0001
me=6*10**24
mj=1.9*10**27
ms=2*10**30

vestandard=2*pi
vjstandard=2.755359
tj=11.85782442
rj=5.2

#函数定义
def O(r_e,theta_e,nex,ney,r,theta_j,njx,njy,nTS):    
#初始参数角度，弧度转换
     theta_e1=math.radians(theta_e)
     theta_j1=math.radians(theta_j)
     xe=r_e*(math.cos(theta_e1))
     ye=r_e*(math.sin(theta_e1))

     r_j=r*rj
     xj=r_j*(math.cos(theta_j1))
     yj=r_j*(math.sin(theta_j1))
#太阳初始位置计算
     ve_x=nex*vestandard
     ve_y=ney*vestandard
     vj_x=njx*vjstandard
     vj_y=njy*vjstandard
     TS=nTS*tj
     
     xs=-(me*xe+mj*xj)/ms
     ys=-(me*ye+mj*yj)/ms
     vsx=-(me*ve_x+mj*vj_x)/ms
     vsy=-(me*ve_y+mj*vj_y)/ms
#数组定义
     XE=[xe]
     YE=[ye]
     XJ=[xj]
     YJ=[yj]
     XS=[xs]
     YS=[ys]

     VEX=[ve_x]
     VEY=[ve_y]
     VJX=[vj_x]
     VJY=[vj_y]

     VSX=[vsx]
     VSY=[vsy]
     vex=ve_x
     vey=ve_y

     vjx=vj_x
     vjy=vj_y

     t=0
    #T=[t]
     while t<TS:
#计算部分
       rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
       res=math.sqrt((xe-xs)**2+(ye-ys)**2)
       rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
       a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
       b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
       c1=xe+a1*deta
       d1=ye+b1*deta       
#对木星
       a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
       b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
       c2=xj+a2*deta
       d2=yj+b2*deta
#对太阳
       a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
       b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
       c3=xs+a3*deta
       d3=ys+b3*deta
#对整体
       vex=a1
       vey=b1
       xe=c1
       ye=d1

       vjx=a2
       vjy=b2
       xj=c2
       yj=d2

       vsx=a3
       vsy=b3
       xs=c3
       ys=d3
    
       XE.append(xe)
       YE.append(ye)
       XJ.append(xj)
       YJ.append(yj)
       XS.append(xs)
       YS.append(ys)
       
       VEX.append(ve_x)
       VEY.append(ve_y)
       VJX.append(vj_x)
       VJY.append(vj_y)
       VSX.append(vsx)  
       VSY.append(vsy)
       t=t+deta
     else:
       print('over')
       pl.figure(figsize=(9,9))
       pl.title('Earth/Jupiter Orbits',size=15)
       pl.xlabel('x(AU)',size=14)
       pl.ylabel('y(AU)',size=14)
       pl.xlim(-7,7)
       pl.ylim(-7,7)
       pl.plot(XE,YE,color='b',linewidth=1.5,label='Earth')
       pl.plot(XJ,YJ,color='g',linewidth=1.5,label='Jupiter')
       pl.plot(XS,YS,color='r',linewidth=3,label='Sun')
       pl.legend(loc='upper right')
       pl.show()





O(1,0,-0.9,1,    1,0,0,1,       0.5)  
#def O(r/re,theta-e,vx/ve,vy/ve,   r/rj,theta-j,vx/vj,vy/vj,  t/Tj):
    
程序1：（待运行）
对于地球速度方向自0-180，制成4*2*(5,5)的多子图，只显示地球轨迹；
作两张多子图；
原函数改为只描点而不显示。模拟时间5个木星周期：

import pylab as pl  
import math

#常数部分
pi=math.pi
k=4*math.pi**2
deta=0.0001
me=6*10**24#6*10**24
mj=1.9*10**27#1.9*10**27
ms=2*10**30#2*10**30



vestandard=2*pi
vjstandard=2.75535903
tj=11.85782442
rj=5.2

def O(r_e,theta_e,nve,beta1,r,theta_j,nvj,beta2,nTS):    
#初始参数角度，弧度转换
     theta_e1=math.radians(theta_e)
     theta_j1=math.radians(theta_j)
     xe=r_e*(math.cos(theta_e1))
     ye=r_e*(math.sin(theta_e1))

     r_j=r*rj
     xj=r_j*(math.cos(theta_j1))
     yj=r_j*(math.sin(theta_j1))
#太阳初始位置计算
     ve_x=nve*vestandard*math.cos(math.radians(beta1))
     ve_y=nve*vestandard*math.sin(math.radians(beta1))
     vj_x=nvj*vjstandard*math.cos(math.radians(beta2))
     vj_y=nvj*vjstandard*math.sin(math.radians(beta2))
     TS=nTS*tj
     
     xs=-(me*xe+mj*xj)/ms
     ys=-(me*ye+mj*yj)/ms
     vsx=-(me*ve_x+mj*vj_x)/ms
     vsy=-(me*ve_y+mj*vj_y)/ms
#数组定义
     XE=[xe]
     YE=[ye]
     XJ=[xj]
     YJ=[yj]
     XS=[xs]
     YS=[ys]

     VEX=[ve_x]
     VEY=[ve_y]
     VJX=[vj_x]
     VJY=[vj_y]

     VSX=[vsx]
     VSY=[vsy]
     vex=ve_x
     vey=ve_y

     vjx=vj_x
     vjy=vj_y

     t=0
    #T=[t]
     while t<TS:
#计算部分
       rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
       res=math.sqrt((xe-xs)**2+(ye-ys)**2)
       rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
       a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
       b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
       c1=xe+a1*deta
       d1=ye+b1*deta       
#对木星
       a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
       b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
       c2=xj+a2*deta
       d2=yj+b2*deta
#对太阳
       a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
       b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
       c3=xs+a3*deta
       d3=ys+b3*deta
#对整体
       vex=a1
       vey=b1
       xe=c1
       ye=d1

       vjx=a2
       vjy=b2
       xj=c2
       yj=d2

       vsx=a3
       vsy=b3
       xs=c3
       ys=d3
    
       XE.append(xe)
       YE.append(ye)
       XJ.append(xj)
       YJ.append(yj)
       XS.append(xs)
       YS.append(ys)
       
       VEX.append(ve_x)
       VEY.append(ve_y)
       VJX.append(vj_x)
       VJY.append(vj_y)
       VSX.append(vsx)  
       VSY.append(vsy)
       t=t+deta
     else:
       pl.xlim(-3,3)
       pl.ylim(-3,3)
       pl.xlabel('x(AU)',size=14)
  
       pl.text(2,-2,beta1,size=16)
       pl.plot(XE,YE,color='b',linewidth=1.5,label='Earth')
       #pl.plot(XJ,YJ,color='g',linewidth=1.5,label='Jupiter')
       pl.plot(XS,YS,color='r',linewidth=3,label='Sun')
       pl.legend(loc='upper right')
       



alpha=0
pl.figure(figsize=(20,10))#4*2*(5,5)
while alpha<=105:
    
    n=alpha/15+1
    pl.subplot(2,4,n)
    O(1,0,1,alpha,    1,0,1,90,      5)  
    alpha=alpha+15
else:
    pl.subplot(2,4,1)
    pl.title('Earth/Jupiter Orbits',size=15)
    pl.ylabel('y(AU)',size=14)
    pl.subplot(2,4,5)
    pl.ylabel('y(AU)',size=14)
    print('end')
    pl.show()  
#def O(r/re,theta-e,vx/ve,vy/ve,   r/rj,theta-j,vx/vj,vy/vj,  t/Tj):

alpha=120
pl.figure(figsize=(20,10))#4*2*(5,5)
while alpha<=180:
 
    n=(alpha-120)/15+1
    pl.subplot(2,4,n)
    O(1,0,1,alpha,    1,0,1,90,      5)  
    alpha=alpha+15
else:
    pl.subplot(2,4,1)
    pl.title('Earth/Jupiter Orbits',size=15)
    pl.ylabel('y(AU)',size=14)
    pl.subplot(2,4,5)
    pl.ylabel('y(AU)',size=14)
    print('end')
pl.show()  


程序2：
只选择那些速度与质心连线方向垂直的位置点描点：（单图）

import pylab as pl  
import math

#常数部分
pi=math.pi
k=4*math.pi**2
deta=0.0001
me=6*10**24#6*10**24
mj=1*(1.9*10**27)
ms=2*10**30#2*10**30
pl.figure(figsize=(10,10))


vestandard=2*pi
vjstandard=2.75535903
tj=11.85782442
rj=5.2

def O(r_e,theta_e,nve,beta1,r,theta_j,nvj,beta2,nTS):    
#初始参数角度，弧度转换
     theta_e1=math.radians(theta_e)
     theta_j1=math.radians(theta_j)
     xe=r_e*(math.cos(theta_e1))
     ye=r_e*(math.sin(theta_e1))

     r_j=r*rj
     xj=r_j*(math.cos(theta_j1))
     yj=r_j*(math.sin(theta_j1))
#太阳初始位置计算
     ve_x=nve*vestandard*math.cos(math.radians(beta1))
     ve_y=nve*vestandard*math.sin(math.radians(beta1))
     vj_x=nvj*vjstandard*math.cos(math.radians(beta2))
     vj_y=nvj*vjstandard*math.sin(math.radians(beta2))
     TS=nTS*tj
     
     xs=-(me*xe+mj*xj)/ms
     ys=-(me*ye+mj*yj)/ms
     vsx=-(me*ve_x+mj*vj_x)/ms
     vsy=-(me*ve_y+mj*vj_y)/ms
#数组定义
     XE=[xe]
     YE=[ye]
     XJ=[xj]
     YJ=[yj]
     XS=[xs]
     YS=[ys]

     VEX=[ve_x]
     VEY=[ve_y]
     VJX=[vj_x]
     VJY=[vj_y]

     VSX=[vsx]
     VSY=[vsy]
     vex=ve_x
     vey=ve_y

     vjx=vj_x
     vjy=vj_y

     t=0
    #T=[t]
    
     XEE=[]
     YEE=[]
     if abs(vex*xe+vey*ye)<=5*10**-3:
         XEE.append(xe)
         YEE.append(ye)
     else:
         XEE=XEE
         YEE=YEE
         
     while t<TS:
#计算部分
       rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
       res=math.sqrt((xe-xs)**2+(ye-ys)**2)
       rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
       a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
       b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
       c1=xe+a1*deta
       d1=ye+b1*deta       
#对木星
       a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
       b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
       c2=xj+a2*deta
       d2=yj+b2*deta
#对太阳
       a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
       b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
       c3=xs+a3*deta
       d3=ys+b3*deta
#对整体
       vex=a1
       vey=b1
       xe=c1
       ye=d1

       vjx=a2
       vjy=b2
       xj=c2
       yj=d2

       vsx=a3
       vsy=b3
       xs=c3
       ys=d3
    
       XE.append(xe)
       YE.append(ye)
       XJ.append(xj)
       YJ.append(yj)
       XS.append(xs)
       YS.append(ys)
       
       VEX.append(vex)
       VEY.append(vey)
       VJX.append(vj_x)
       VJY.append(vj_y)
       VSX.append(vsx)  
       VSY.append(vsy)
       t=t+deta
       
       if abs(vex*xe+vey*ye)<=1*10**-2:
           XEE.append(xe)
           YEE.append(ye)
       else:
           XEE=XEE
           YEE=YEE   
           
     else:
       print('over')
       #print(XEE)
       pl.xlim(-6,6)
       pl.ylim(-6,6)
       pl.xlabel('x(AU)',size=14)
           
       #pl.text(2,-2,beta1,size=16)
       pl.scatter(XE,YE,color='lightblue',s=1,label='Earth')
       pl.scatter(XEE,YEE,color='k',s=3,label='Earth')
       #pl.plot(XJ,YJ,color='g',linewidth=1.5,label='Jupiter')
       pl.plot(XS,YS,color='r',linewidth=3,label='Sun')
       pl.legend(loc='upper right')
       pl.show()
       

O(1,0,1,75,    1,0,1,90,      7)

程序3：（待运行）
只选择远，近日点的多子图，只改变地球初始速度方向。
2*4*（5,5），模拟10个木星周期

import pylab as pl  
import math

#常数部分
pi=math.pi
k=4*math.pi**2
deta=0.0001
me=6*10**24#6*10**24
mj=1*(1.9*10**27)
ms=2*10**30#2*10**30
pl.figure(figsize=(10,10))


vestandard=2*pi
vjstandard=2.75535903
tj=11.85782442
rj=5.2

def O(r_e,theta_e,nve,beta1,r,theta_j,nvj,beta2,nTS):    
#初始参数角度，弧度转换
     theta_e1=math.radians(theta_e)
     theta_j1=math.radians(theta_j)
     xe=r_e*(math.cos(theta_e1))
     ye=r_e*(math.sin(theta_e1))

     r_j=r*rj
     xj=r_j*(math.cos(theta_j1))
     yj=r_j*(math.sin(theta_j1))
#太阳初始位置计算
     ve_x=nve*vestandard*math.cos(math.radians(beta1))
     ve_y=nve*vestandard*math.sin(math.radians(beta1))
     vj_x=nvj*vjstandard*math.cos(math.radians(beta2))
     vj_y=nvj*vjstandard*math.sin(math.radians(beta2))
     TS=nTS*tj
     
     xs=-(me*xe+mj*xj)/ms
     ys=-(me*ye+mj*yj)/ms
     vsx=-(me*ve_x+mj*vj_x)/ms
     vsy=-(me*ve_y+mj*vj_y)/ms
#数组定义
     XE=[xe]
     YE=[ye]
     XJ=[xj]
     YJ=[yj]
     XS=[xs]
     YS=[ys]

     VEX=[ve_x]
     VEY=[ve_y]
     VJX=[vj_x]
     VJY=[vj_y]

     VSX=[vsx]
     VSY=[vsy]
     vex=ve_x
     vey=ve_y

     vjx=vj_x
     vjy=vj_y

     t=0
    #T=[t]
    
     XEE=[]
     YEE=[]
     if abs(vex*xe+vey*ye)<=5*10**-3:
         XEE.append(xe)
         YEE.append(ye)
     else:
         XEE=XEE
         YEE=YEE
         
     while t<TS:
#计算部分
       rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
       res=math.sqrt((xe-xs)**2+(ye-ys)**2)
       rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
       a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
       b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
       c1=xe+a1*deta
       d1=ye+b1*deta       
#对木星
       a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
       b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
       c2=xj+a2*deta
       d2=yj+b2*deta
#对太阳
       a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
       b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
       c3=xs+a3*deta
       d3=ys+b3*deta
#对整体
       vex=a1
       vey=b1
       xe=c1
       ye=d1

       vjx=a2
       vjy=b2
       xj=c2
       yj=d2

       vsx=a3
       vsy=b3
       xs=c3
       ys=d3
    
       XE.append(xe)
       YE.append(ye)
       XJ.append(xj)
       YJ.append(yj)
       XS.append(xs)
       YS.append(ys)
       
       VEX.append(vex)
       VEY.append(vey)
       VJX.append(vj_x)
       VJY.append(vj_y)
       VSX.append(vsx)  
       VSY.append(vsy)
       t=t+deta
       
       if abs(vex*xe+vey*ye)<=1*10**-2:
           XEE.append(xe)
           YEE.append(ye)
       else:
           XEE=XEE
           YEE=YEE   
           
     else:
       #print(XEE)
       pl.xlim(-10,10)
       pl.ylim(-10,10)
       pl.xlabel('x(AU)',size=14)
           
       #pl.text(2,-2,beta1,size=16)
       #pl.scatter(XE,YE,color='lightblue',s=1,label='Earth')
       pl.scatter(XEE,YEE,color='k',s=3,label='Earth')
       pl.plot(XEE,YEE,color='k',linewidth=1,label='Earth')
       pl.text(2,-2,beta1,size=16)
       pl.plot(XJ,YJ,color='g',linewidth=1.5,label='Jupiter')
       pl.plot(XS,YS,color='r',linewidth=3,label='Sun')
       pl.legend(loc='upper right')
      
       
alpha=0
pl.figure(figsize=(20,10))#4*2*(5,5)
while alpha<=105:
    
    n=alpha/15+1
    pl.subplot(2,4,n)
    O(1,0,1,alpha,    1,0,1,90,      10)  
    alpha=alpha+15
else:
    pl.subplot(2,4,1)
    pl.title('Earth/Jupiter Orbits',size=15)
    pl.ylabel('y(AU)',size=14)
    pl.subplot(2,4,5)
    pl.ylabel('y(AU)',size=14)
    pl.show()
    print('end') 
#def O(r/re,theta-e,vx/ve,vy/ve,   r/rj,theta-j,vx/vj,vy/vj,  t/Tj):

alpha=120
pl.figure(figsize=(20,10))#4*2*(5,5)
while alpha<=180:
 
    n=(alpha-120)/15+1
    pl.subplot(2,4,n)
    O(1,0,1,alpha,    1,0,1,90,      10)  
    alpha=alpha+15
else:
    pl.subplot(2,4,1)
    pl.title('Earth/Jupiter Orbits',size=15)
    pl.ylabel('y(AU)',size=14)
    pl.subplot(2,4,5)
    pl.ylabel('y(AU)',size=14)
    pl.show()  
    print('end')

程序4：（待运行）
若木星以其自身的轨道速度到达地球轨道，与地球相同时针方向，在角度差为60时作（10,10）大图，10个周期。对剩下120,180,240,300度作2*2*（7,7）多子图，各模拟5个木星周期

import pylab as pl  
import math

#常数部分
pi=math.pi
k=4*math.pi**2
deta=0.0001
me=6*10**24#6*10**24
mj=1.9*10**27#1.9*10**27
ms=2*10**30#2*10**30



vestandard=2*pi
vjstandard=2.75535903
tj=11.85782442
rj=5.2

def O(r_e,theta_e,nve,beta1,r,theta_j,nvj,beta2,nTS):    
#初始参数角度，弧度转换
     theta_e1=math.radians(theta_e)
     theta_j1=math.radians(theta_j)
     xe=r_e*(math.cos(theta_e1))
     ye=r_e*(math.sin(theta_e1))

     r_j=r*rj
     xj=r_j*(math.cos(theta_j1))
     yj=r_j*(math.sin(theta_j1))
#太阳初始位置计算
     ve_x=nve*vestandard*math.cos(math.radians(beta1))
     ve_y=nve*vestandard*math.sin(math.radians(beta1))
     vj_x=nvj*vjstandard*math.cos(math.radians(beta2))
     vj_y=nvj*vjstandard*math.sin(math.radians(beta2))
     TS=nTS*tj
     
     xs=-(me*xe+mj*xj)/ms
     ys=-(me*ye+mj*yj)/ms
     vsx=-(me*ve_x+mj*vj_x)/ms
     vsy=-(me*ve_y+mj*vj_y)/ms
#数组定义
     XE=[xe]
     YE=[ye]
     XJ=[xj]
     YJ=[yj]
     XS=[xs]
     YS=[ys]

     VEX=[ve_x]
     VEY=[ve_y]
     VJX=[vj_x]
     VJY=[vj_y]

     VSX=[vsx]
     VSY=[vsy]
     vex=ve_x
     vey=ve_y

     vjx=vj_x
     vjy=vj_y

     t=0
    #T=[t]
     while t<TS:
#计算部分
       rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
       res=math.sqrt((xe-xs)**2+(ye-ys)**2)
       rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
       a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
       b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
       c1=xe+a1*deta
       d1=ye+b1*deta       
#对木星
       a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
       b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
       c2=xj+a2*deta
       d2=yj+b2*deta
#对太阳
       a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
       b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
       c3=xs+a3*deta
       d3=ys+b3*deta
#对整体
       vex=a1
       vey=b1
       xe=c1
       ye=d1

       vjx=a2
       vjy=b2
       xj=c2
       yj=d2

       vsx=a3
       vsy=b3
       xs=c3
       ys=d3
    
       XE.append(xe)
       YE.append(ye)
       XJ.append(xj)
       YJ.append(yj)
       XS.append(xs)
       YS.append(ys)
       
       VEX.append(ve_x)
       VEY.append(ve_y)
       VJX.append(vj_x)
       VJY.append(vj_y)
       VSX.append(vsx)  
       VSY.append(vsy)
       t=t+deta
     else:
       pl.xlim(-6,6)
       pl.ylim(-6,6)
       pl.xlabel('x(AU)',size=14)
       pl.plot(XE,YE,color='b',linewidth=1.5,label='Earth')
       pl.plot(XJ,YJ,color='g',linewidth=1.5,label='Jupiter')
       pl.plot(XS,YS,color='r',linewidth=3,label='Sun')
       pl.legend(loc='upper right')
       





#pl.figure(figsize=(10,10))#4*2*(5,5)
#O(1,0,1,90,    1/rj,0,1,90,      0.01)#0.002) 
#def O(r/re,theta-e,速度大小,速度与水平之夹角,   r/rj,theta-j,vx/vj,vy/vj,  t/Tj):

alpha=120
pl.figure(figsize=(14,14))#4*2*(5,5)
while alpha<360:
    n=(alpha-120)/60+1
    pl.subplot(2,2,n)
    O(1,alpha,1,alpha+90,    1/5.2,0,1,90,      5)#0.002)  
    alpha=alpha+60
else:
    pl.subplot(2,2,1)
    pl.title('Earth/Jupiter Orbits',size=15)
    pl.ylabel('y(AU)',size=14)
    pl.subplot(2,2,3)
    pl.ylabel('y(AU)',size=14)
    print('end')
    pl.show()  
    
pl.figure(figsize=(10,10))#4*2*(5,5)
O(1,60,1,150,    1/5.2,0,1,90,      10)#0.002)

程序5：（待运行）
将木星质量放大100倍，初始条件为正常的木星轨道/速度。研究在角度差为0时作（10,10）大图，对剩下60，120,180,240,300度作2*3*（7,7）多子图，各模拟5个木星周期

import pylab as pl  
import math

#常数部分
pi=math.pi
k=4*math.pi**2
deta=0.0001
me=6*10**24#6*10**24
mj=100*1.9*10**27#1.9*10**27
ms=2*10**30#2*10**30



vestandard=2*pi
vjstandard=2.75535903
tj=11.85782442
rj=5.2

def O(r_e,theta_e,nve,beta1,r,theta_j,nvj,beta2,nTS):    
#初始参数角度，弧度转换
     theta_e1=math.radians(theta_e)
     theta_j1=math.radians(theta_j)
     xe=r_e*(math.cos(theta_e1))
     ye=r_e*(math.sin(theta_e1))

     r_j=r*rj
     xj=r_j*(math.cos(theta_j1))
     yj=r_j*(math.sin(theta_j1))
#太阳初始位置计算
     ve_x=nve*vestandard*math.cos(math.radians(beta1))
     ve_y=nve*vestandard*math.sin(math.radians(beta1))
     vj_x=nvj*vjstandard*math.cos(math.radians(beta2))
     vj_y=nvj*vjstandard*math.sin(math.radians(beta2))
     TS=nTS*tj
     
     xs=-(me*xe+mj*xj)/ms
     ys=-(me*ye+mj*yj)/ms
     vsx=-(me*ve_x+mj*vj_x)/ms
     vsy=-(me*ve_y+mj*vj_y)/ms
#数组定义
     XE=[xe]
     YE=[ye]
     XJ=[xj]
     YJ=[yj]
     XS=[xs]
     YS=[ys]

     VEX=[ve_x]
     VEY=[ve_y]
     VJX=[vj_x]
     VJY=[vj_y]

     VSX=[vsx]
     VSY=[vsy]
     vex=ve_x
     vey=ve_y

     vjx=vj_x
     vjy=vj_y

     t=0
    #T=[t]
     while t<TS:
#计算部分
       rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
       res=math.sqrt((xe-xs)**2+(ye-ys)**2)
       rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
       a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
       b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
       c1=xe+a1*deta
       d1=ye+b1*deta       
#对木星
       a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
       b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
       c2=xj+a2*deta
       d2=yj+b2*deta
#对太阳
       a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
       b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
       c3=xs+a3*deta
       d3=ys+b3*deta
#对整体
       vex=a1
       vey=b1
       xe=c1
       ye=d1

       vjx=a2
       vjy=b2
       xj=c2
       yj=d2

       vsx=a3
       vsy=b3
       xs=c3
       ys=d3
    
       XE.append(xe)
       YE.append(ye)
       XJ.append(xj)
       YJ.append(yj)
       XS.append(xs)
       YS.append(ys)
       
       VEX.append(ve_x)
       VEY.append(ve_y)
       VJX.append(vj_x)
       VJY.append(vj_y)
       VSX.append(vsx)  
       VSY.append(vsy)
       t=t+deta
     else:
       pl.xlim(-6,6)
       pl.ylim(-6,6)
       pl.xlabel('x(AU)',size=14)
       pl.plot(XE,YE,color='b',linewidth=1.5,label='Earth')
       pl.plot(XJ,YJ,color='g',linewidth=1.5,label='Jupiter')
       pl.plot(XS,YS,color='r',linewidth=3,label='Sun')
       pl.legend(loc='upper right')
       





#pl.figure(figsize=(10,10))#4*2*(5,5)
#O(1,0,1,90,    1/rj,0,1,90,      0.01)#0.002) 
#def O(r/re,theta-e,速度大小,速度与水平之夹角,   r/rj,theta-j,vx/vj,vy/vj,  t/Tj):

alpha=60
pl.figure(figsize=(21,14))#4*2*(5,5)
while alpha<360:
    n=(alpha-60)/60+1
    pl.subplot(2,3,n)
    O(1,alpha,1,alpha+90,    1,0,1,90,      0.5)#0.002)  
    alpha=alpha+60
else:
    pl.subplot(2,3,1)
    pl.title('Earth/Jupiter Orbits',size=15)
    pl.ylabel('y(AU)',size=14)
    print('end')
    pl.show()  
    
pl.figure(figsize=(10,10))#4*2*(5,5)
O(1,0,1,150,    1,0,1,90,      10)#0.002)
程序6：（待运行）
将木星质量放大1000倍，初始条件为正常的木星轨道/速度。研究在角度差为0时作（10,10）大图，对剩下60，120,180,240,300度作2*3*（7,7）多子图，各模拟5个木星周期

import pylab as pl  
import math

#常数部分
pi=math.pi
k=4*math.pi**2
deta=0.0001
me=6*10**24#6*10**24
mj=1000*1.9*10**27#1.9*10**27
ms=2*10**30#2*10**30



vestandard=2*pi
vjstandard=2.75535903
tj=11.85782442
rj=5.2

def O(r_e,theta_e,nve,beta1,r,theta_j,nvj,beta2,nTS):    
#初始参数角度，弧度转换
     theta_e1=math.radians(theta_e)
     theta_j1=math.radians(theta_j)
     xe=r_e*(math.cos(theta_e1))
     ye=r_e*(math.sin(theta_e1))

     r_j=r*rj
     xj=r_j*(math.cos(theta_j1))
     yj=r_j*(math.sin(theta_j1))
#太阳初始位置计算
     ve_x=nve*vestandard*math.cos(math.radians(beta1))
     ve_y=nve*vestandard*math.sin(math.radians(beta1))
     vj_x=nvj*vjstandard*math.cos(math.radians(beta2))
     vj_y=nvj*vjstandard*math.sin(math.radians(beta2))
     TS=nTS*tj
     
     xs=-(me*xe+mj*xj)/ms
     ys=-(me*ye+mj*yj)/ms
     vsx=-(me*ve_x+mj*vj_x)/ms
     vsy=-(me*ve_y+mj*vj_y)/ms
#数组定义
     XE=[xe]
     YE=[ye]
     XJ=[xj]
     YJ=[yj]
     XS=[xs]
     YS=[ys]

     VEX=[ve_x]
     VEY=[ve_y]
     VJX=[vj_x]
     VJY=[vj_y]

     VSX=[vsx]
     VSY=[vsy]
     vex=ve_x
     vey=ve_y

     vjx=vj_x
     vjy=vj_y

     t=0
    #T=[t]
     while t<TS:
#计算部分
       rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
       res=math.sqrt((xe-xs)**2+(ye-ys)**2)
       rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
       a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
       b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
       c1=xe+a1*deta
       d1=ye+b1*deta       
#对木星
       a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
       b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
       c2=xj+a2*deta
       d2=yj+b2*deta
#对太阳
       a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
       b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
       c3=xs+a3*deta
       d3=ys+b3*deta
#对整体
       vex=a1
       vey=b1
       xe=c1
       ye=d1

       vjx=a2
       vjy=b2
       xj=c2
       yj=d2

       vsx=a3
       vsy=b3
       xs=c3
       ys=d3
    
       XE.append(xe)
       YE.append(ye)
       XJ.append(xj)
       YJ.append(yj)
       XS.append(xs)
       YS.append(ys)
       
       VEX.append(ve_x)
       VEY.append(ve_y)
       VJX.append(vj_x)
       VJY.append(vj_y)
       VSX.append(vsx)  
       VSY.append(vsy)
       t=t+deta
     else:
       pl.xlim(-15,15)
       pl.ylim(-15,15)
       pl.xlabel('x(AU)',size=14)
       pl.plot(XE,YE,color='b',linewidth=1.5,label='Earth')
       pl.plot(XJ,YJ,color='g',linewidth=1.5,label='Jupiter')
       pl.plot(XS,YS,color='r',linewidth=3,label='Sun')
       pl.legend(loc='upper right')
       





#pl.figure(figsize=(10,10))#4*2*(5,5)
#O(1,0,1,90,    1/rj,0,1,90,      0.01)#0.002) 
#def O(r/re,theta-e,速度大小,速度与水平之夹角,   r/rj,theta-j,vx/vj,vy/vj,  t/Tj):

alpha=60
pl.figure(figsize=(21,14))#4*2*(5,5)
while alpha<360:
    n=(alpha-60)/60+1
    pl.subplot(2,3,n)
    O(1,alpha,1,alpha+90,    1,0,1,90,      5)#0.002)  
    alpha=alpha+60
else:
    pl.subplot(2,3,1)
    pl.title('Earth/Jupiter Orbits',size=15)
    pl.ylabel('y(AU)',size=14)
    print('end')
    pl.show()  
    
pl.figure(figsize=(10,10))#4*2*(5,5)
O(1,0,1,150,    1,0,1,90,      10)#0.002)

程序7：（待运行）
假设地球速度初始静止，且位于木星与太阳之引力平衡点上。模拟10个木星周期
再考虑100,1000倍质量

import pylab as pl  
import math

#常数部分
pi=math.pi
k=4*math.pi**2
deta=0.0001
me=6*10**24#6*10**24
mj=1*1.9*10**27#1.9*10**27
ms=2*10**30#2*10**30



vestandard=2*pi
vjstandard=2.75535903
tj=11.85782442
rj=5.2

def O(r_e,theta_e,nve,beta1,r,theta_j,nvj,beta2,nTS):    
#初始参数角度，弧度转换
     theta_e1=math.radians(theta_e)
     theta_j1=math.radians(theta_j)
     xe=r_e*(math.cos(theta_e1))
     ye=r_e*(math.sin(theta_e1))

     r_j=r*rj
     xj=r_j*(math.cos(theta_j1))
     yj=r_j*(math.sin(theta_j1))
#太阳初始位置计算
     ve_x=nve*vestandard*math.cos(math.radians(beta1))
     ve_y=nve*vestandard*math.sin(math.radians(beta1))
     vj_x=nvj*vjstandard*math.cos(math.radians(beta2))
     vj_y=nvj*vjstandard*math.sin(math.radians(beta2))
     TS=nTS*tj
     
     xs=-(me*xe+mj*xj)/ms
     ys=-(me*ye+mj*yj)/ms
     vsx=-(me*ve_x+mj*vj_x)/ms
     vsy=-(me*ve_y+mj*vj_y)/ms
#数组定义
     XE=[xe]
     YE=[ye]
     XJ=[xj]
     YJ=[yj]
     XS=[xs]
     YS=[ys]

     VEX=[ve_x]
     VEY=[ve_y]
     VJX=[vj_x]
     VJY=[vj_y]

     VSX=[vsx]
     VSY=[vsy]
     vex=ve_x
     vey=ve_y

     vjx=vj_x
     vjy=vj_y

     t=0
    #T=[t]
     while t<TS:
#计算部分
       rej=math.sqrt((xe-xj)**2+(ye-yj)**2)
       res=math.sqrt((xe-xs)**2+(ye-ys)**2)
       rsj=math.sqrt((xs-xj)**2+(ys-yj)**2)
#对地球
       a1=vex-((k*(mj/ms)*(xe-xj))/(rej**3))*deta-((k*(ms/ms)*(xe-xs))/(res**3))*deta
       b1=vey-((k*(mj/ms)*(ye-yj))/(rej**3))*deta-((k*(ms/ms)*(ye-ys))/(res**3))*deta
       c1=xe+a1*deta
       d1=ye+b1*deta       
#对木星
       a2=vjx-((k*(me/ms)*(xj-xe))/(rej**3))*deta-((k*(ms/ms)*(xj-xs))/(rsj**3))*deta
       b2=vjy-((k*(me/ms)*(yj-ye))/(rej**3))*deta-((k*(ms/ms)*(yj-ys))/(rsj**3))*deta
       c2=xj+a2*deta
       d2=yj+b2*deta
#对太阳
       a3=vsx-((k*(me/ms)*(xs-xe))/(res**3))*deta-((k*(mj/ms)*(xs-xj))/(rsj**3))*deta
       b3=vsy-((k*(me/ms)*(ys-ye))/(res**3))*deta-((k*(mj/ms)*(ys-yj))/(rsj**3))*deta
       c3=xs+a3*deta
       d3=ys+b3*deta
#对整体
       vex=a1
       vey=b1
       xe=c1
       ye=d1

       vjx=a2
       vjy=b2
       xj=c2
       yj=d2

       vsx=a3
       vsy=b3
       xs=c3
       ys=d3
    
       XE.append(xe)
       YE.append(ye)
       XJ.append(xj)
       YJ.append(yj)
       XS.append(xs)
       YS.append(ys)
       
       VEX.append(ve_x)
       VEY.append(ve_y)
       VJX.append(vj_x)
       VJY.append(vj_y)
       VSX.append(vsx)  
       VSY.append(vsy)
       t=t+deta
     else:
       pl.xlim(-15,15)
       pl.ylim(-15,15)
       pl.xlabel('x(AU)',size=14)
       pl.plot(XE,YE,color='b',linewidth=1.5,label='Earth')
       pl.plot(XJ,YJ,color='g',linewidth=1.5,label='Jupiter')
       pl.plot(XS,YS,color='r',linewidth=3,label='Sun')
       pl.legend(loc='upper right')
       





pl.figure(figsize=(10,10))
#O(1,0,1,90,    1/rj,0,1,90,      0.01)#0.002) 
#def O(r/re,theta-e,速度大小,速度与水平之夹角,   r/rj,theta-j,vx/vj,vy/vj,  t/Tj):
kk=mj/ms
u=1-kk*math.sqrt(kk)
v=1+math.sqrt(kk)
l=5.2*(u/v)
O(l,0,0,0,    1,0,1,90,      10)#0.002) 
pl.show()
print(l,'AU')









