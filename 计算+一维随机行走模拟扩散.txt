import numpy as np
import pylab as pl
import random
import math 


class diffusion():
    """
    time evolution calculated from the diffusion equation in one dimension
    """
    def __init__(self,D,dt,dx,steps):
        self.D=D
        self.dx=dx
        self.dt=dt
        self.steps=steps
        self.xx=np.linspace(-self.steps,self.steps,2*self.steps+1)
        self.y=[[0]*(2*self.steps+1) for i in range(self.steps+1)] 

        self.y[0][self.steps]=1
        self.y[0][0]=0
        self.y[0][2*self.steps]=0

    def iteration(self):
        m=self.D*self.dt/(self.dx**2)
        for n in range(self.steps):
            for i in range(1,2*self.steps):
                
                self.y[n+1][i]=self.y[n][i]+m*(self.y[n][i+1]+self.y[n][i-1]-2*self.y[n][i])
                self.y[n+1][0]=0
                self.y[n+1][2*self.steps]=0

        return [self.y[self.steps],self.xx]
    
    
pl.figure(figsize=(14,14)) 
pl.subplot(221)   
a1=diffusion(1,0.5,1,100)
b1=a1.iteration()
pl.plot(b1[1],b1[0],color="olivedrab")
pl.xlim(-100,100)
pl.xlabel("x",size=16)
pl.ylabel("density",size=16)
pl.title("diffusion in one dimension,steps=100",size=18)



pl.subplot(222)   
a1=diffusion(1,0.5,1,300)
b1=a1.iteration()
pl.plot(b1[1],b1[0],color="olivedrab")
pl.xlim(-100,100)
pl.xlabel("x",size=16)
pl.ylabel("density",size=16)
pl.title("diffusion in one dimension,steps=300",size=18)

pl.subplot(223)   
a1=diffusion(1,0.5,1,600)
b1=a1.iteration()
pl.plot(b1[1],b1[0],color="olivedrab")
pl.xlim(-100,100)
pl.xlabel("x",size=16)
pl.ylabel("density",size=16)
pl.title("diffusion in one dimension,steps=600",size=18)

pl.subplot(224)   
a1=diffusion(1,0.5,1,1000)
b1=a1.iteration()
pl.plot(b1[1],b1[0],color="olivedrab")
pl.xlim(-100,100)
pl.xlabel("x",size=16)
pl.ylabel("density",size=16)
pl.title("diffusion in one dimension,steps=1000",size=18)

pl.show()

class rwalk():
    """
    random-walker distributions in one dimension
    """
    def __init__(self,steps,walkers):
        self.steps=steps
        self.walkers=walkers
        
        self.x=np.zeros(int(self.steps))
        
        self.t=np.linspace(-self.steps,self.steps,2*self.steps+1)
        
        self.x2=[[0]*(2*self.steps+1) for i in range(2)]
        self.x3=0
        
    def calculate(self):
        for n in range(int(self.walkers)):
            self.x3=0
            for i in range(int(self.steps)):
                temp1=random.uniform(0,1)
                if temp1<=0.5:
                    self.x3=self.x3-1
                if temp1>0.5:
                    self.x3=self.x3+1
            y=self.x3
            self.x2[1][int(self.steps+y)]+=1
        x4=[]
        for n in range(len(self.x2[1])):
            
            x4.append(self.x2[1][n]/self.walkers)
        
        return [self.t,x4]    
    
pl.figure(figsize=(14,14))                 
pl.subplot(221)        
a1=rwalk(10,1000)
b1=a1.calculate()
pl.plot(b1[0],b1[1],color="darkgreen",marker='+')
pl.xlabel("x",size=16)
pl.ylabel("probability",size=16)
pl.title("steps=10",size=18)

pl.subplot(222)        
a2=rwalk(100,1000)
b2=a2.calculate()
pl.plot(b2[0],b2[1],color="darkgreen")
pl.xlabel("x",size=16)
pl.title("steps=100",size=18)

pl.subplot(223)        
a3=rwalk(1000,1000)
b3=a3.calculate()
pl.plot(b3[0],b3[1],color="darkgreen")
pl.xlabel("x",size=16)
pl.ylabel("probability",size=16)
pl.title("steps=1000",size=18)

pl.subplot(224)        
a4=rwalk(10000,1000)
b4=a4.calculate()
pl.plot(b4[0],b4[1],color="darkgreen")
pl.xlabel("x",size=16)
pl.title("steps=10000",size=18)


pl.show()

